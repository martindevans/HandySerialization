<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using HandySerialization.Wrappers;

namespace HandySerialization.Extensions.Bits;

public static class SmallIntExtensions
{
<# for (var nbits = 2; nbits < 64; nbits++) { #>
	/// <summary>
    /// Write an int with <#= nbits #> bits
    /// </summary>
    /// <typeparam name="TBytes"></typeparam>
    /// <param name="writer"></param>
    /// <param name="value"></param>
    public static void WriteUInt<#= nbits #><TBytes>(ref this BitWriter<TBytes> writer, <#= NumericType(nbits) #> value)
        where TBytes : struct, IByteWriter
    {
        writer.Write(value, <#= nbits #>);
    }

    public static <#= NumericType(nbits) #> ReadUInt<#= nbits #><TBytes>(ref this BitReader<TBytes> reader)
        where TBytes : struct, IByteReader
    {
        return (reader.Read() ? <#= SingleBitMask(nbits - 1, nbits) #> : 0)
<# for (var i = 1; i < nbits; i++) { #>
             | (reader.Read() ? <#= SingleBitMask(nbits - i - 1, nbits) #> : 0)
<# } #>
             ;
    }

<# } #>
    /// <summary>
    /// Write an int with a specific number of bits
    /// </summary>
    /// <typeparam name="TBytes"></typeparam>
    /// <param name="writer"></param>
    /// <param name="value"></param>
    /// <param name="bits"></param>
    public static void WriteSmallUInt<TBytes>(ref this BitWriter<TBytes> writer, uint value, uint bits)
        where TBytes : struct, IByteWriter
    {
        writer.Write(value, bits);
    }

    public static uint ReadSmallUInt<TBytes>(ref this BitReader<TBytes> reader, uint bits)
        where TBytes : struct, IByteReader
    {
        var value = 0u;

        for (var i = 0u; i < bits; i++)
            value |= reader.Read() ? 1u << (int)(bits - i - 1u) : 0u;

        return value;
    }

    /// <summary>
    /// Write a number as N zeroes, followed by a one
    /// </summary>
    /// <typeparam name="TBytes"></typeparam>
    /// <param name="writer"></param>
    /// <param name="value"></param>
    public static void WriteUnaryInt<TBytes>(ref this BitWriter<TBytes> writer, byte value)
        where TBytes : struct, IByteWriter
    {
        for (var i = 0; i < value; i++)
            writer.Write(false);
        writer.Write(true);
    }

    public static byte ReadUnaryInt<TBytes>(ref this BitReader<TBytes> reader)
        where TBytes : struct, IByteReader
    {
        var count = 0;
        while (!reader.Read())
            count++;
        return (byte)count;
    }
}

<#+
public static string SingleBitMask(int bit, int total)
{
    var pz = Math.Max(0, total - bit - 1);
    var prefix = new string('0', pz);
    var suffix = total > 32 ? "ul" : "u";

    return "0b" + prefix + "1" + new string('0', bit) + suffix;
}

public static string NumericType(int total)
{
    return total > 32 ? "ulong" : "uint";
}
#>